from flask import Flask, Response
import cv2
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# Initialize Flask app
app = Flask(__name__)

# Load the pre-trained model
model = load_model('path_to_your_model/cotton_disease.h5')  # Adjust path as needed

# Initialize video capture
camera = cv2.VideoCapture(0)  # Adjust this based on your camera configuration

def predict_disease(frame):
    """Predict disease from a video frame."""
    img = cv2.resize(frame, (256, 256))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0  # Normalization

    predictions = model.predict(img_array)
    max_index = np.argmax(predictions)
    classes = ['bacterial_blight', 'fussarium_wilt', 'healthy']
    predicted_class = classes[max_index]
    return predicted_class

def generate_frames():
    """Generate frame by frame from camera."""
    while True:
        success, frame = camera.read()
        if not success:
            break
        else:
            # Prediction
            prediction = predict_disease(frame)
            # Put prediction text on frame
            cv2.putText(frame, f'Prediction: {prediction}', (10, 35), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            # Encode frame for streaming
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/video_feed')
def video_feed():
    """Video streaming route. Put this in the src attribute of an img tag."""
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)  # Runs on http://0.0.0.0:5000
